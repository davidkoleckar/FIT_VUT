#!/bin/bash
#PBS -A DD-19-7
#PBS -q qexp 
#PBS -l walltime=01:00:00
#PBS -l select=1:ncpus=24
#PBS -o /dev/null
#PBS -e error.txt
#PBS -m e

#module load intel/2018a HDF5/1.10.4-intel-2018a-serial
module load intel/2017a HDF5/1.8.18-intel-2017a-serial

cd "$PBS_O_WORKDIR" #go into the folder from which this script was started

threads=(2 4 8 16 24)  #number of threads used
#threads=(2 4 8 16)    #number of threads used
sizes=(64 128 256 512 1024 2048 4096 8192)    #domain sizes

#SCRATCH=/scratch/temp      #globalni scratch
SCRATCH=/ramdisk/$PBS_JOBID #ramdisk
#SCRATCH=.                  #home scratch


stdoutFile="benchmark.csv"   #stdout output from this script goes here
stderrFile="err.txt"         #stderr output


playground=$SCRATCH/$USER #here the hdf5 files  are stored (global scratch)

if [ ! -d "$playground" ]; then
  mkdir $playground
fi


#CSV output header
echo "domainSize;nIterations;nThreads;diskWriteIntensity;airflow;materialFile;\
simulationMode;simulationOutputFile;avgColumnTemperature;totalTime;\
iterationTime"  >> ${stdoutFile}
      

export OMP_PROC_BIND=true 
export OMP_PLACES=cores 
export OMP_DISPLAY_ENV=true 


diskWriteIntensity=10      

for size in ${sizes[*]} 
do
  #calculate the "appropriate" number of iterations (by voko) so that 
  #the program runs long enough to measure accurate times
  nIterations=`expr $((10000000/$size))`
  
  
  #generate input file for the simulation (material properties)
  ../DataGenerator/arc_generator -o ${playground}/tmp_material.h5 -N ${size} -H 100 -C 20 &>/dev/null
  
  #run sequential version for given domain size 
  ../Sources/arc_proj01 -b -n $nIterations -m 0 -w $diskWriteIntensity -t 1 -i ${playground}/tmp_material.h5 -o ${playground}/${size}x${size}_out.h5 >> ${stdoutFile}  2>>${stderrFile}
  
  #cleanup
  rm -f ${playground}/${size}x${size}_out_seq.h5
  
  #run both parallel versions for given number of threads and domain size
  for thread in ${threads[*]} 
  do
    #mode 1 - non-overlapped file output    
    ../Sources/arc_proj01 -b -n $nIterations -m 1 -w $diskWriteIntensity -t ${thread} -i ${playground}/tmp_material.h5 -o ${playground}/${size}x${size}_${thread}threads_out.h5 >> ${stdoutFile}  2>>${stderrFile}
    
    #cleanup
    rm -f ${playground}/${size}x${size}_${thread}threads_out_par1.h5   
  done

  for thread in ${threads[*]} 
  do  
    #mode 2 - non-overlapped file output    
    ../Sources/arc_proj01 -b -n $nIterations -m 2 -w $diskWriteIntensity -t ${thread} -i ${playground}/tmp_material.h5 -o ${playground}/${size}x${size}_${thread}threads_out.h5 >> ${stdoutFile}  2>>${stderrFile} 
    
    #cleanup
    rm -f ${playground}/${size}x${size}_${thread}threads_out_par2.h5            
  done
  
  for thread in ${threads[*]} 
  do  
    #mode 3 - overlapped file output
    ../Sources/arc_proj01 -b -n $nIterations -m 3 -w $diskWriteIntensity -t ${thread} -i ${playground}/tmp_material.h5 -o ${playground}/${size}x${size}_${thread}threads_out.h5 >> ${stdoutFile}  2>>${stderrFile} 
    
    #cleanup
    rm -f ${playground}/${size}x${size}_${thread}threads_out_par3.h5            
  done
  
  rm -f ${playground}/tmp_material.h5 
done    

